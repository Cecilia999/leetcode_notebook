// 题目大意
// 给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。
// 初始化 A 和 B 的元素数量分别为 m 和 n。

// 示例:
// 输入:
// A = [1,2,3,0,0,0], m = 3
// B = [2,5,6],       n = 3
// 输出: [1,2,2,3,5,6]
// 说明: A.length == n + m

class Solution {
    public void merge(int[] A, int m, int[] B, int n) {
        // 先确保将其中一个数组中的数字遍历完
        while(m>0 && n>0){
            //如果B[n-1]>A[m-1]，把B[n]放在 A[n+m-1]
            if(B[n-1]>A[m-1]){
                A[n+m-1] = B[--n];
            }
            else
                A[n+m-1] = A[--m];
        }

        // 剩下的数都比已经遍历过的数小，m 和 n 有且只有一个为 0：
        // 1.如果 m 不为 0，则 A 没遍历完，都已经在 A 中不用再管
        // 2.如果 n 不为 0，则 B 没遍历完，直接全移到 A 中相同的位置
        while(n>0){
            A[n-1] = B[n-1];
            n--;
        }

    }
}
