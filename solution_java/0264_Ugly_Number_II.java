//思路

//这道题目自己是有思路的，丑数能够分解成2^x^ * 3^y^ * 5^z^，我们只需要关注丑数即可
//所以只需要把得到的丑数不断地乘以2、3、5之后并放入他们应该放置的位置即可，
//而此题的难点就在于如何有序的放在合适的位置。

// 1乘以 （2、3、5）= 2、3、5；

// 2乘以（2、3、5）= 4、6、10；

// 3乘以（2、3、5）= 6、9、15；

// 4乘以（2、3、5）= 8、12、20；

// 丑数x 乘以（2、3、5）=  2x、3x、5x

// 从这里我们可以看到如果不加策略地添加丑数是会有重复并且无序的
// 而在2^x^ * 3^y^ * 5^z^中，我们要维持三个指针（p2、p3、p5）来记录当前乘以2、乘以3、乘以5的底数（上面的1，2，3，4），我们可以初始化result[0]=1，想象下指向5的指针什么时候才会移动，那当然是当5 * 1比result[p2] * 2和 result[p3] *3 都小时，p5指向result[1]==2，这里取最小关系到每轮循环拿到对应顺序大小的丑数

class Solution {
  public int nthUglyNumber(int n) {
      //dp[n]代表第n个丑数
      int[] dp  = new int[n+1];
      dp[0]=0;
      dp[1]=1;
      
      //initialize 3个pointer
      int p2=1, p3=1, p5=1;
      for(int i=2; i<=n; i++){
          dp[i] = Math.min(dp[p2]*2, Math.min(dp[p3]*3, dp[p5]*5));
          if(dp[i] == dp[p2]*2)
              p2++;
          if(dp[i] == dp[p3]*3)
              p3++;
          if(dp[i] == dp[p5]*5)
              p5++;
      }
      return dp[n];
  }
}