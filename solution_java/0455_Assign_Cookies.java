// 题目大意
// 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
// 对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。
// 如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
//  
// 示例 1:
// 输入: g = [1,2,3], s = [1,1]
// 输出: 1
// 解释: 
// 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
// 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
// 所以你应该输出1。

// 示例 2:
// 输入: g = [1,2], s = [1,2,3]
// 输出: 2
// 解释: 
// 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
// 你拥有的饼干数量和尺寸都足以让所有孩子满足。
// 所以你应该输出2. 

// 提示：
// 1 <= g.length <= 3 * 104
// 0 <= s.length <= 3 * 104
// 1 <= g[i], s[j] <= 231 - 1

// 解题思路

// 因为饥饿度最小的孩子最容易满足，所以先满足最小饥饿度的。
// 为了尽量能满足后面饥饿度高的孩子，给予满足孩子的所有饼干中最小的饼干。
// 这就是贪心策略，也就是说给予目前饥饿度最小的孩子能吃饱的最小饼干。
// 比较方便的实现是，把孩子和饼干按饥饿度和大小排序，初始化第一个孩子和第一块饼干为起始点(两个指针指针)，
// 如果孩子饥饿度小于等于饼干大小，指向孩子和饼干的点(指针)都往后移动，也就是满足了这个孩子；
// 否则饼干丢弃，指向饼干的点(指针)往后移，再继续比较和循环下去。

class Solution {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);
        int child=0, cookie=0;
        
        while(child<g.length && cookie<s.length){
            if(g[child]<=s[cookie])
                child++;
            cookie++;
        }
        
        return child;
    }
}