// 如果青蛙选择第一次跳1阶，那么接下来最多只能跳n-1阶，也就最多能有n-1种跳法，
// 如果青蛙选择第一次跳2阶，那么接下来最多只能跳n-2阶，也就最多能有n-2种跳法，…，依次类推
// 如果青蛙选择第一次跳n-1阶，那么接下来最多只能跳1阶，也就最多能有1种跳法，
// 所以，设该青蛙跳上一个n级的台阶总共有f（n）种跳法，
// 则f（n）= f（n-1）+ f（n-2）+ f（n-3）+ … + f（1）。
// 而f（n-1）= f（n-2）+ f（n-3）+ f（n-4）+…+ f（1）。
// 两式相减得f（n）= 2 * f（n-1）
//2 * 2 * f(n-2)=2 * 2 * 2 * f(n-3)=...=2^(n-1)*f(1)=2^(n-1)

//另一种思路就是为了跳上n个台阶
//每个台阶都有跳与不跳两种情况（除了最后一个台阶），最后一个台阶必须跳。所以共用2^(n-1)中情况
public class Solution {
  public int jumpFloorII(int n) {
      int[] dp = new int[n+1];
      //dp[0]不重要
      dp[0] = 0;
      dp[1] = 1;
      for(int i=2; i<=n; i++){
          dp[i]=2*dp[i-1];
      }
      return dp[n];
  }
}